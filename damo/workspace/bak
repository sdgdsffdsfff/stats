#!/usr/bin/env python
import sys
import itertools
import collections
import MySQLdb
from StringIO import StringIO
import multiprocessing
from datetime import *
import tempfile
import profile

insert_event_times_sql_month = "insert into event_times_last_month(event,times) values(%s,%s)"
insert_event_times_sql_week = "insert into event_times_last_week(event,times) values(%s,%s)"
insert_event_times_sql_day = "insert into event_times_last_day(event,times) values(%s,%s)"
insert_event_times_sql_12hours = "insert into event_times_last_12hours(event,times) values(%s,%s)"
insert_event_times_sql_6hours = "insert into event_times_last_6hours(event,times) values(%s,%s)"

insert_event_ip_iptimes_sql_month = "insert into event_ip_iptimes_last_month(event,ip,iptimes) values(%s,%s,%s)"
insert_event_ip_iptimes_sql_week = "insert into event_ip_iptimes_last_week(event,ip,iptimes) values(%s,%s,%s)"
insert_event_ip_iptimes_sql_day = "insert into event_ip_iptimes_last_day(event,ip,iptimes) values(%s,%s,%s)"
insert_event_ip_iptimes_sql_12hours = "insert into event_ip_iptimes_last_12hours(event,ip,iptimes) values(%s,%s,%s)"
insert_event_ip_iptimes_sql_6hours = "insert into event_ip_iptimes_last_6hours(event,ip,iptimes) values(%s,%s,%s)"

insert_event_url_urltimes_sql_month = "insert into event_url_urltimes_last_month(event,url,urltimes) values(%s,%s,%s)"
insert_event_url_urltimes_sql_week = "insert into event_url_urltimes_last_week(event,url,urltimes) values(%s,%s,%s)"
insert_event_url_urltimes_sql_day = "insert into event_url_urltimes_last_day(event,url,urltimes) values(%s,%s,%s)"
insert_event_url_urltimes_sql_12hours = "insert into event_url_urltimes_last_12hours(event,url,urltimes) values(%s,%s,%s)"
insert_event_url_urltimes_sql_6hours = "insert into event_url_urltimes_last_6hours(event,url,urltimes) values(%s,%s,%s)"

insert_event_ruleid_ruleidtimes_sql_month = "insert into event_ruleid_ruleidtimes_last_month(event,ruleid,ruleidtimes) value(%s,%s,%s)"
insert_event_ruleid_ruleidtimes_sql_week = "insert into event_ruleid_ruleidtimes_last_week(event,ruleid,ruleidtimes) value(%s,%s,%s)"
insert_event_ruleid_ruleidtimes_sql_day = "insert into event_ruleid_ruleidtimes_last_day(event,ruleid,ruleidtimes) value(%s,%s,%s)"
insert_event_ruleid_ruleidtimes_sql_12hours = "insert into event_ruleid_ruleidtimes_last_12hours(event,ruleid,ruleidtimes) value(%s,%s,%s)"
insert_event_ruleid_ruleidtimes_sql_6hours = "insert into event_ruleid_ruleidtimes_last_6hours(event,ruleid,ruleidtimes) value(%s,%s,%s)"

class mysqldb(object):
    def __init__(self,h,u,p,db,cs):
        self.conn = MySQLdb.connect(host=h,user=u,passwd=p,db=db,charset=cs)
        self.cursor = self.conn.cursor()

        self.create_event_times_sql_month = "create table if not exists event_times_last_month(event varchar(64) primary key,times int(100))"
        self.create_event_times_sql_week = "create table if not exists event_times_last_week(event varchar(64) primary key,times int(100))"
        self.create_event_times_sql_day = "create table if not exists event_times_last_day(event varchar(64) primary key,times int(100))"
        self.create_event_times_sql_12hours = "create table if not exists event_times_last_12hours(event varchar(64) primary key,times int(100))"
        self.create_event_times_sql_6hours = "create table if not exists event_times_last_6hours(event varchar(64) primary key,times int(100))"

        self.create_event_ip_iptimes_sql_month = "create table if not exists event_ip_iptimes_last_month(event varchar(64),ip varchar(20),iptimes int(100))"
        self.create_event_ip_iptimes_sql_week = "create table if not exists event_ip_iptimes_last_week(event varchar(64),ip varchar(20),iptimes int(100))"
        self.create_event_ip_iptimes_sql_day = "create table if not exists event_ip_iptimes_last_day(event varchar(64),ip varchar(20),iptimes int(100))"
        self.create_event_ip_iptimes_sql_12hours = "create table if not exists event_ip_iptimes_last_12hours(event varchar(64),ip varchar(20),iptimes int(100))"
        self.create_event_ip_iptimes_sql_6hours = "create table if not exists event_ip_iptimes_last_6hours(event varchar(64),ip varchar(20),iptimes int(100))"

        self.create_event_url_urltimes_sql_month = "create table if not exists event_url_urltimes_last_month(event varchar(64),url varchar(4096),urltimes int(100))"
        self.create_event_url_urltimes_sql_week = "create table if not exists event_url_urltimes_last_week(event varchar(64),url varchar(4096),urltimes int(100))"
        self.create_event_url_urltimes_sql_day = "create table if not exists event_url_urltimes_last_day(event varchar(64),url varchar(4096),urltimes int(100))"
        self.create_event_url_urltimes_sql_12hours = "create table if not exists event_url_urltimes_last_12hours(event varchar(64),url varchar(4096),urltimes int(100))"
        self.create_event_url_urltimes_sql_6hours = "create table if not exists event_url_urltimes_last_6hours(event varchar(64),url varchar(4096),urltimes int(100))"

        self.create_event_ruleid_ruleidtimes_sql_month = "create table if not exists event_ruleid_ruleidtimes_last_month(event varchar(64),ruleid varchar(20),ruleidtimes int(100))"
        self.create_event_ruleid_ruleidtimes_sql_week = "create table if not exists event_ruleid_ruleidtimes_last_week(event varchar(64),ruleid varchar(20),ruleidtimes int(100))"
        self.create_event_ruleid_ruleidtimes_sql_day = "create table if not exists event_ruleid_ruleidtimes_last_day(event varchar(64),ruleid varchar(20),ruleidtimes int(100))"
        self.create_event_ruleid_ruleidtimes_sql_12hours = "create table if not exists event_ruleid_ruleidtimes_last_12hours(event varchar(64),ruleid varchar(20),ruleidtimes int(100))"
        self.create_event_ruleid_ruleidtimes_sql_6hours = "create table if not exists event_ruleid_ruleidtimes_last_6hours(event varchar(64),ruleid varchar(20),ruleidtimes int(100))"

        self.drop_table("event_times_last_month")
        self.drop_table("event_times_last_week")
        self.drop_table("event_times_last_day")
        self.drop_table("event_times_last_12hours")
        self.drop_table("event_times_last_6hours")

        self.drop_table("event_ip_iptimes_last_month")
        self.drop_table("event_ip_iptimes_last_week")
        self.drop_table("event_ip_iptimes_last_day")
        self.drop_table("event_ip_iptimes_last_12hours")
        self.drop_table("event_ip_iptimes_last_6hours")

        self.drop_table("event_url_urltimes_last_month")
        self.drop_table("event_url_urltimes_last_week")
        self.drop_table("event_url_urltimes_last_day")
        self.drop_table("event_url_urltimes_last_12hours")
        self.drop_table("event_url_urltimes_last_6hours")

        self.drop_table("event_ruleid_ruleidtimes_last_month")
        self.drop_table("event_ruleid_ruleidtimes_last_week")
        self.drop_table("event_ruleid_ruleidtimes_last_day")
        self.drop_table("event_ruleid_ruleidtimes_last_12hours")
        self.drop_table("event_ruleid_ruleidtimes_last_6hours")

        self.create_table(self.create_event_times_sql_month)
        self.create_table(self.create_event_times_sql_week)
        self.create_table(self.create_event_times_sql_day)
        self.create_table(self.create_event_times_sql_12hours)
        self.create_table(self.create_event_times_sql_6hours)

        self.create_table(self.create_event_ip_iptimes_sql_month)
        self.create_table(self.create_event_ip_iptimes_sql_week)
        self.create_table(self.create_event_ip_iptimes_sql_day)
        self.create_table(self.create_event_ip_iptimes_sql_12hours)
        self.create_table(self.create_event_ip_iptimes_sql_6hours)

        self.create_table(self.create_event_url_urltimes_sql_month)
        self.create_table(self.create_event_url_urltimes_sql_week)
        self.create_table(self.create_event_url_urltimes_sql_day)
        self.create_table(self.create_event_url_urltimes_sql_12hours)
        self.create_table(self.create_event_url_urltimes_sql_6hours)

        self.create_table(self.create_event_ruleid_ruleidtimes_sql_month)
        self.create_table(self.create_event_ruleid_ruleidtimes_sql_week)
        self.create_table(self.create_event_ruleid_ruleidtimes_sql_day)
        self.create_table(self.create_event_ruleid_ruleidtimes_sql_12hours)
        self.create_table(self.create_event_ruleid_ruleidtimes_sql_6hours)

    def drop_table(self,table_name):
        if table_name:
            self.cursor.execute("drop table if exists %s"%table_name)

    def create_table(self,create_table_sql):
        if create_table_sql:
            self.cursor.execute(create_table_sql)

    def insert_data_to_table(self,insert_sql,pargm):
        if insert_sql:
            self.cursor.execute(insert_sql,pargm)

    def updata_table_data(self,updata_sql):
        if updata_sql:
            self.cursor.execute(updata_sql)

    def lookup(self,sql):
        if sql:
            ret = self.cursor.execute(sql)
            for row in self.cursor.fetchall():
                print row

    def delete_table_data(self,delete_sql):
        if delete_sql:
            self.cursor.execute(delete_sql)

    def commit(self):
        self.conn.commit()

    def close(self):
        self.cursor.close()
        self.conn.close()

tmpIOBuffer = tempfile.NamedTemporaryFile()
def mapper(dbhandler):
    '''
    map output format (event,time,client_ip,url,rule_id
    #UNIX_TIMESTAMP()
    #FROM_UNIXTIME(timestamp) 2003-09-09 11:20:22
    #DATE_ADD('2004-03-14 12:22:1', INTERVAL 6 HOUR)
    #DATE_SUB('2004-03-14 12:22:1', INTERVAL 6 HOUR)
    '''
    #filter by db 0.429s
    readline_num = dbhandler.cursor.execute("select * from log_info where DATE_SUB(now(),INTERVAL 1 DAY) < time")
    for timeinfo,match_type,attack_type,ip,url,ruleid in dbhandler.cursor.fetchall():
        event_type = ''
        if attack_type.strip() == '-':
            event_type = 'MODSEC_ALERT_EVENT_' + match_type.split('_')[-1]
        #if attack type is not - then event type can reduce by attack type
        else:
            event_type = 'MODSEC_ALERT_EVENT_' + attack_type.split('_')[-1]
        print >>tmpIOBuffer,timeinfo,',',event_type,',',ip,',',url,',',ruleid
        #print timeinfo,',',event_type,',',ip,',',url,',',ruleid

def reducer(dbhandler):
    '''
    input data format is:
    (event,[[time,ip,url,rule_id],...])
    '''
    dbhandler.cursor.execute("select * from event_log_info")
    i = 0 
    for time,event_type,ip,url,ruleid in dbhandler.cursor.fetchall():
        i += 1
        #print "reducer:\t",time,event_type,ip,url,ruleid
    print i

    dbhandler.commit()
    dbhandler.close()
    '''
    #dbhandler = mysqldb('localhost','root','root','topwaf_config_db','utf8')
    for event,eventinfo in output_by_partition.items():
        dbhandler.insert_data_to_table(insert_event_times_sql_month,(event,len(eventinfo))) 

        ips = collections.defaultdict(int)
        urls = collections.defaultdict(int)
        rule_ids = collections.defaultdict(int)

        for element in eventinfo:
            ips[element[1]] += 1
            urls[element[2]] += 1
            rule_ids[element[3]] += 1
        
    #need to optimized
    with open("./event_ips_ipstimes.data","w") as ipsfile:
        for key,value in ips.items():
            print >> ipsfile,r','.join(list([event,key,repr(value)]))
        sql = r'LOAD DATA INFILE %s INTO TABLE event_ip_iptimes_last_month FIELDS TERMINATED BY "," LINES TERMINATED BY "\n"'%(r'"./event_ips_ipstimes.data"')
        print dbhandler.cursor.execute(sql)

        #with open("./event_urls_urlstimes.data","w") as urlsfile:
            #for key,value in urls.items():
                #print >> urlsfile,','.join(list([event,key,repr(value)]))
            #dbhandler.cursor.execute(r'LOAD DATA LOCAL INFILE "./event_urls_urlstimes.data" INTO TABLE event_url_urltimes_last_month FIELDS TERMINATED BY "," LINES TERMINATED BY "\n"')
#
        #with open("./event_ruleids_ruleidstimes.data","w") as ruleidsfile:
            #for key,value in rule_ids.items():
                #print >> ruleidsfile,r','.join(list([event,key,repr(value)]))
            #dbhandler.cursor.execute(r'LOAD DATA LOCAL INFILE "./event_ruleids_ruleidstimes.data" INTO TABLE event_ruleid_ruleidtimes_last_month FIELDS TERMINATED BY "," LINES TERMINATED BY "\n"')

    dbhandler.commit()
    dbhandler.close()
    '''

class MapReduce(object):
    def __init__(self,mapper,reducer):
        self.mapper = mapper
        self.reducer = reducer
        self.dbhandler = mysqldb('localhost','root','root','event_statistic','utf8')

    def partition(self):
        '''
        temporary table definition: time,event_type,ip,url,ruleid
        '''
        load_data_to_tmp_table_sql = r'LOAD DATA LOCAL INFILE "%s" INTO TABLE event_log_info FIELDS TERMINATED BY "," LINES TERMINATED BY "\n"'%tmpIOBuffer.name
        #this temporary table will store in mem and be delete untill close the session
        self.dbhandler.cursor.execute("create temporary table if not exists event_log_info(time DATETIME not null,event char(64),ip char(20), url varchar(200), ruleid int(7))")
        self.dbhandler.cursor.execute(load_data_to_tmp_table_sql)
        tmpIOBuffer.close()

        #print info in temporary table
        #self.dbhandler.cursor.execute("select * from event_log_info")
        #i = 0
        #for timeinfo,event_type,ip,url,ruleid in self.dbhandler.cursor.fetchall():
            #i += 1
            #print "partition:\t",timeinfo,event_type,ip,url,ruleid
        #print i

    def __call__(self):
        self.mapper(self.dbhandler)
        partitioned_data = self.partition()
        result = self.reducer(self.dbhandler)
        #return result

if __name__ == "__main__":
    run = MapReduce(mapper,reducer)
    run()
    #profile.run("run()")
